

==== resources\js\api.ts ====

import axios from 'axios';

const api = axios.create({
  baseURL: '/api', // Assuming your API is served from the /api route
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

export default api;


==== resources\js\app.js ====

import './bootstrap';
import '../css/app.css';
import 'primeicons/primeicons.css';

import { createApp, h } from 'vue';
import { createInertiaApp, Head, Link } from '@inertiajs/vue3';
import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';
import { ZiggyVue } from '../../vendor/tightenco/ziggy';

import { createPinia } from 'pinia';
import { purchaseOrderPlugin } from './Plugins/purchaseOrderPlugin';

import PrimeVue from 'primevue/config';
import ToastService from 'primevue/toastservice';
import InputText from 'primevue/inputtext';
import Button from 'primevue/button';
import Core from 'primevue/config'
import IftaLabel from 'primevue/iftalabel';
import FileUpload from 'primevue/fileupload'
import Steps from 'primevue/steps'
import Card from 'primevue/card';
import OrderList from 'primevue/orderlist'; // Add this line

import { useTheme } from './Composables/useTheme.js';
import customThemePreset from './theme-preset.js';
// Import Orion SDK
import { Orion } from "@tailflow/laravel-orion/lib/orion";

const appName = import.meta.env.VITE_APP_NAME || 'Laravel';

// Initialize Orion SDK
Orion.init(window.location.origin);

const pinia = createPinia();
pinia.use(purchaseOrderPlugin);

createInertiaApp({
    title: (title) => `${title} - ${appName}`,
    resolve: (name) =>
        resolvePageComponent(
            `./Pages/${name}.vue`,
            import.meta.glob('./Pages/**/*.vue')
        ),
    setup({ el, App, props, plugin }) {
        // set site theme (light/dark mode)
        const { initSiteTheme } = useTheme();
        initSiteTheme();

        // start the app
        return createApp({ render: () => h(App, props) })
            .use(plugin)
            .use(pinia)
            .use(ZiggyVue, Ziggy)
            .use(PrimeVue, {
                theme: customThemePreset,
            })
            .component('FileUpload', FileUpload)
            .component('Steps', Steps)
            .component('Button', Button)
            .component('Card', Card)
            .component('OrderList', OrderList) // Add this line
            .use(ToastService)
            .component('Head', Head)
            .component('Link', Link)
            .component('InputText', InputText)
            .component('IftaLabel', IftaLabel)
            .component('Core', Core)
            .mount(el);
    },
    progress: {
        color: 'var(--p-primary-500)',
    },
});


==== resources\js\bootstrap.js ====

import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';


==== resources\js\Components\AddressDisplay.vue ====

<template>
  <div class="address-display">
    <p>{{ address.street }}</p>
    <p>{{ address.city }}, {{ address.state }} {{ address.zip }}</p>
  </div>
</template>

<script setup>
defineProps({
  address: {
    type: Object,
    required: true
  }
});
</script>


==== resources\js\Components\AddressFields.vue ====

<template>
  <div class="address-fields">
    <h2>Addresses</h2>
    <div class="grid">
      <div class="col-12 md:col-4">
        <h3>Ship From</h3>
        <AddressDisplay :address="store.purchaseOrder.shipFrom" />
      </div>
      <div class="col-12 md:col-4">
        <h3>Bill To</h3>
        <AddressDisplay :address="store.purchaseOrder.billTo" />
      </div>
      <div class="col-12 md:col-4">
        <h3>Ship To</h3>
        <AddressDisplay :address="store.purchaseOrder.shipTo" />
      </div>
    </div>
  </div>
</template>

<script setup>
import { usePurchaseOrderStore } from '../Stores/purchaseOrderStore';
import AddressDisplay from './AddressDisplay.vue';

const store = usePurchaseOrderStore();
</script>


==== resources\js\Components\ApplicationLogo.vue ====

<template>
    <svg viewBox="0 0 316 316" xmlns="http://www.w3.org/2000/svg">
        <path
            d="M305.8 81.125C305.77 80.995 305.69 80.885 305.65 80.755C305.56 80.525 305.49 80.285 305.37 80.075C305.29 79.935 305.17 79.815 305.07 79.685C304.94 79.515 304.83 79.325 304.68 79.175C304.55 79.045 304.39 78.955 304.25 78.845C304.09 78.715 303.95 78.575 303.77 78.475L251.32 48.275C249.97 47.495 248.31 47.495 246.96 48.275L194.51 78.475C194.33 78.575 194.19 78.725 194.03 78.845C193.89 78.955 193.73 79.045 193.6 79.175C193.45 79.325 193.34 79.515 193.21 79.685C193.11 79.815 192.99 79.935 192.91 80.075C192.79 80.285 192.71 80.525 192.63 80.755C192.58 80.875 192.51 80.995 192.48 81.125C192.38 81.495 192.33 81.875 192.33 82.265V139.625L148.62 164.795V52.575C148.62 52.185 148.57 51.805 148.47 51.435C148.44 51.305 148.36 51.195 148.32 51.065C148.23 50.835 148.16 50.595 148.04 50.385C147.96 50.245 147.84 50.125 147.74 49.995C147.61 49.825 147.5 49.635 147.35 49.485C147.22 49.355 147.06 49.265 146.92 49.155C146.76 49.025 146.62 48.885 146.44 48.785L93.99 18.585C92.64 17.805 90.98 17.805 89.63 18.585L37.18 48.785C37 48.885 36.86 49.035 36.7 49.155C36.56 49.265 36.4 49.355 36.27 49.485C36.12 49.635 36.01 49.825 35.88 49.995C35.78 50.125 35.66 50.245 35.58 50.385C35.46 50.595 35.38 50.835 35.3 51.065C35.25 51.185 35.18 51.305 35.15 51.435C35.05 51.805 35 52.185 35 52.575V232.235C35 233.795 35.84 235.245 37.19 236.025L142.1 296.425C142.33 296.555 142.58 296.635 142.82 296.725C142.93 296.765 143.04 296.835 143.16 296.865C143.53 296.965 143.9 297.015 144.28 297.015C144.66 297.015 145.03 296.965 145.4 296.865C145.5 296.835 145.59 296.775 145.69 296.745C145.95 296.655 146.21 296.565 146.45 296.435L251.36 236.035C252.72 235.255 253.55 233.815 253.55 232.245V174.885L303.81 145.945C305.17 145.165 306 143.725 306 142.155V82.265C305.95 81.875 305.89 81.495 305.8 81.125ZM144.2 227.205L100.57 202.515L146.39 176.135L196.66 147.195L240.33 172.335L208.29 190.625L144.2 227.205ZM244.75 114.995V164.795L226.39 154.225L201.03 139.625V89.825L219.39 100.395L244.75 114.995ZM249.12 57.105L292.81 82.265L249.12 107.425L205.43 82.265L249.12 57.105ZM114.49 184.425L96.13 194.995V85.305L121.49 70.705L139.85 60.135V169.815L114.49 184.425ZM91.76 27.425L135.45 52.585L91.76 77.745L48.07 52.585L91.76 27.425ZM43.67 60.135L62.03 70.705L87.39 85.305V202.545V202.555V202.565C87.39 202.735 87.44 202.895 87.46 203.055C87.49 203.265 87.49 203.485 87.55 203.695V203.705C87.6 203.875 87.69 204.035 87.76 204.195C87.84 204.375 87.89 204.575 87.99 204.745C87.99 204.745 87.99 204.755 88 204.755C88.09 204.905 88.22 205.035 88.33 205.175C88.45 205.335 88.55 205.495 88.69 205.635L88.7 205.645C88.82 205.765 88.98 205.855 89.12 205.965C89.28 206.085 89.42 206.225 89.59 206.325C89.6 206.325 89.6 206.325 89.61 206.335C89.62 206.335 89.62 206.345 89.63 206.345L139.87 234.775V285.065L43.67 229.705V60.135ZM244.75 229.705L148.58 285.075V234.775L219.8 194.115L244.75 179.875V229.705ZM297.2 139.625L253.49 164.795V114.995L278.85 100.395L297.21 89.825V139.625H297.2Z"
        />
    </svg>
</template>


==== resources\js\Components\Container.vue ====

<script setup>
const props = defineProps({
    spacedMobile: {
        type: Boolean,
        default: true,
        required: false,
    },
});
</script>

<template>
    <div
        :class="[spacedMobile ? 'px-4' : 'px-0']"
        class="max-w-screen-xl mx-auto sm:px-4"
    >
        <slot />
    </div>
</template>


==== resources\js\Components\InputError.vue ====

<script setup>
defineProps({
    message: {
        type: String,
    },
});
</script>

<template>
    <div v-show="message">
        <p class="text-sm text-red-500 dark:text-red-300">
            {{ message }}
        </p>
    </div>
</template>


==== resources\js\Components\LinksMenu.vue ====

<script setup>
import { useTemplateRef } from 'vue';
import Menu from 'primevue/menu';

const childRef = useTemplateRef('child-ref');
defineExpose({
    childRef,
});
</script>

<template>
    <Menu ref="child-ref">
        <template #item="{ item, props }">
            <Link
                v-if="item.route"
                :href="item.route"
                class="p-menu-item-link"
                custom
            >
                <span
                    v-show="item.icon"
                    :class="item.icon"
                    class="p-menu-item-icon"
                />
                <span class="p-menu-item-label">{{ item.label }}</span>
            </Link>
            <a
                v-else
                :href="item.url"
                :target="item.target"
                v-bind="props.action"
            >
                <span
                    v-show="item.icon"
                    :class="item.icon"
                    class="p-menu-item-icon"
                />
                <span class="p-menu-item-label">{{ item.label }}</span>
            </a>
        </template>
    </Menu>
</template>


==== resources\js\Components\LinksMenuBar.vue ====

<script setup>
import { useTemplateRef } from 'vue';
import Menubar from 'primevue/menubar';

const childRef = useTemplateRef('child-ref');
defineExpose({
    childRef,
});
</script>

<template>
    <Menubar ref="child-ref">
        <template v-if="$slots.start" #start>
            <slot name="start"></slot>
        </template>
        <template #item="{ item, props, hasSubmenu, root }">
            <Link
                v-if="item.route"
                :href="item.route"
                class="p-menubar-item-link"
                :class="{
                    'font-bold text-primary dark:text-primary-300 bg-primary-50 dark:bg-primary-950 rounded-lg':
                        item.active,
                }"
                custom
            >
                <span
                    v-show="item.icon"
                    :class="item.icon"
                    class="p-menu-item-icon"
                />
                <span class="p-menu-item-label">{{ item.label }}</span>
            </Link>
            <a
                v-else
                :href="item.url"
                :target="item.target"
                v-bind="props.action"
                class="p-menubar-item-link"
            >
                <span
                    v-show="item.icon"
                    :class="item.icon"
                    class="p-menu-item-icon"
                />
                <span class="p-menu-item-label">{{ item.label }}</span>
                <i
                    v-if="hasSubmenu"
                    :class="[
                        'pi pi-angle-down',
                        {
                            'pi-angle-down ml-2': root,
                            'pi-angle-right ml-auto': !root,
                        },
                    ]"
                ></i>
            </a>
        </template>
        <template v-if="$slots.end" #end>
            <slot name="end"></slot>
        </template>
    </Menubar>
</template>


==== resources\js\Components\LinksPanelMenu.vue ====

<script setup>
import PanelMenu from 'primevue/panelmenu';
</script>

<template>
    <PanelMenu
        :pt="{
            root: {
                class: 'p-0 m-0 gap-1',
            },
            panel: {
                class: 'p-0 border-0',
            },
            header: {
                class: 'p-0 border-0',
            },
            itemContent: {
                class: 'gap-1',
            },
        }"
    >
        <template #item="{ item }">
            <Link
                v-if="item.route"
                :href="item.route"
                custom
                class="flex items-center cursor-pointer no-underline px-4 py-2"
                :class="
                    item.active
                        ? 'text-primary'
                        : 'text-surface-700 dark:text-surface-0'
                "
            >
                <span
                    v-show="item.icon"
                    :class="item.icon"
                    class="p-panelmenu-item-icon mr-2"
                />
                <span>{{ item.label }}</span>
            </Link>
            <a
                v-else
                class="flex items-center cursor-pointer no-underline text-surface-700 dark:text-surface-0 px-4 py-2"
                :href="item.url"
                :target="item.target"
            >
                <span
                    v-show="item.icon"
                    :class="item.icon"
                    class="p-panelmenu-item-icon mr-2"
                />
                <span>{{ item.label }}</span>
                <span v-if="item.items" class="pi pi-angle-down ml-auto" />
            </a>
        </template>
    </PanelMenu>
</template>


==== resources\js\Components\MainMenu.vue ====

<template>
    <div class="card flex justify-center">
        <Drawer v-model:visible="visible">
            <template #container="{ closeCallback }">
                <div class="flex flex-col h-full">
                    <div class="flex items-center justify-between px-6 pt-4 shrink-0">
                        <span class="inline-flex items-center gap-2">
                            <ApplicationLogo class="w-10 h-10" />
                            <span class="font-semibold text-2xl text-primary">Patton IMS</span>
                        </span>
                        <span>
                            <Button type="button" @click="closeCallback" icon="pi pi-times" rounded outlined></Button>
                        </span>
                    </div>
                    <div class="overflow-y-auto">
                        <ul class="list-none p-4 m-0">
                            <li v-for="item in menuItems" :key="item.label">
                                <div
                                    v-ripple
                                    v-styleclass="{
                                        selector: '@next',
                                        enterFromClass: 'hidden',
                                        enterActiveClass: 'animate-slidedown',
                                        leaveToClass: 'hidden',
                                        leaveActiveClass: 'animate-slideup'
                                    }"
                                    class="p-4 flex items-center justify-between text-surface-500 dark:text-surface-400 cursor-pointer p-ripple"
                                >
                                    <span class="font-medium">{{ item.label }}</span>
                                    <i class="pi pi-chevron-down"></i>
                                </div>
                                <ul class="list-none p-0 m-0 overflow-hidden">
                                    <li v-for="subItem in item.items" :key="subItem.label">
                                        <Link
                                            :href="route(subItem.route)"
                                            v-ripple
                                            class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple"
                                            :class="{ 'bg-primary-100 dark:bg-primary-900': $page.url.startsWith(route(subItem.route)) }"
                                        >
                                            <i :class="subItem.icon" class="mr-2"></i>
                                            <span class="font-medium">{{ subItem.label }}</span>
                                        </Link>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </div>
                    <div class="mt-auto">
                        <hr class="mb-4 mx-4 border-t border-0 border-surface-200 dark:border-surface-700" />
                        <a v-ripple class="m-4 flex items-center cursor-pointer p-4 gap-2 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                            <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" shape="circle" />
                            <span class="font-bold">{{ $page.props.auth.user.name }}</span>
                        </a>
                    </div>
                </div>
            </template>
        </Drawer>
    </div>
</template>

<script setup>
import { ref, computed } from "vue";
import { Link } from '@inertiajs/vue3';
import Button from 'primevue/button';
import Drawer from 'primevue/drawer';
import Avatar from 'primevue/avatar';
import ApplicationLogo from '@/Components/ApplicationLogo.vue';

const props = defineProps({
    visible: {
        type: Boolean,
        required: true
    }
});

const emit = defineEmits(['update:visible']);

const visible = computed({
    get: () => props.visible,
    set: (value) => emit('update:visible', value)
});

const menuItems = [
    {
        label: 'Dashboard',
        items: [
            { label: 'Dashboard', icon: 'pi pi-home', route: 'dashboard' }
        ]
    },
    {
        label: 'Purchasing',
        items: [
            { label: 'Create Purchase Order', icon: 'pi pi-plus', route: 'purchase-orders.create' },
            { label: 'Receive Purchase Order', icon: 'pi pi-inbox', route: 'purchase-orders.receive' },
            { label: 'View Purchase Orders', icon: 'pi pi-list', route: 'purchase-orders.index' }
        ]
    },
    {
        label: 'Production',
        items: [
            { label: 'Create Work Order', icon: 'pi pi-plus', route: 'work-orders.create' },
            { label: 'Modify Work Order', icon: 'pi pi-pencil', route: 'work-orders.modify' }
        ]
    }
];
</script>


==== resources\js\Components\OrderSummary.vue ====

<template>
  <div class="order-summary">
    <h2>Order Summary</h2>
    <div class="summary-details">
      <div class="summary-row">
        <span>Subtotal:</span>
        <span>{{ formatCurrency(store.subtotal) }}</span>
      </div>
      <div class="summary-row">
        <span>Tax:</span>
        <span>{{ formatCurrency(store.tax) }}</span>
      </div>
      <div class="summary-row total">
        <span>Total:</span>
        <span>{{ formatCurrency(store.total) }}</span>
      </div>
    </div>
    <div class="special-instructions">
      <h3>Special Instructions</h3>
      <Textarea v-model="specialInstructions" @input="updateSpecialInstructions" rows="5" class="w-full" />
    </div>
  </div>
</template>

<script setup>
import { ref, watch } from 'vue';
import { usePurchaseOrderStore } from '../Stores/purchaseOrderStore';
import Textarea from 'primevue/textarea';

const store = usePurchaseOrderStore();
const specialInstructions = ref('');

function formatCurrency(value) {
  return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);
}

function updateSpecialInstructions() {
  store.setSpecialInstructions(specialInstructions.value);
}

watch(() => store.purchaseOrder.specialInstructions, (newValue) => {
  specialInstructions.value = newValue;
});
</script>

<style scoped>
.order-summary {
  margin-top: 2rem;
}

.summary-details {
  margin-bottom: 1rem;
}

.summary-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: 0.5rem;
}

.total {
  font-weight: bold;
  font-size: 1.2em;
}

.special-instructions {
  margin-top: 1rem;
}
</style>


==== resources\js\Components\PurchaseOrderCreation.vue ====

<template>
  <div class="purchase-order-creation">
    <h1>Create Purchase Order</h1>

    <!-- Supplier Selection Dropdown -->
    <Select
      v-model="selectedSupplierId"
      :options="store.suppliers"
      optionLabel="name"
      optionValue="id"
      placeholder="Select a Supplier"
      class="w-full md:w-14rem mb-4"
      :loading="store.loading"
      @change="onSupplierChange"
    />

    <div v-if="store.error" class="text-red-500 mb-4">{{ store.error }}</div>

    <div v-if="store.selectedSupplier" class="mt-4">
      <AddressFields />
      <PurchaseOrderPartPicker />
      <OrderSummary />
      <div class="flex justify-between items-center mt-4">
        <Button label="Reset" @click="resetPurchaseOrder" severity="secondary" />
        <Button
          label="Create Purchase Order"
          @click="createPurchaseOrder"
          :loading="isCreating"
          :disabled="!canCreatePurchaseOrder"
        />
      </div>
    </div>

    <!-- Debug Information -->
    <div class="debug-info mt-4 p-4 bg-gray-100 border border-gray-300">
      <h3>Debug Info:</h3>
      <p>Supplier Count: {{ store.supplierCount }}</p>
      <p>Selected Supplier: {{ store.selectedSupplier?.name || 'None' }}</p>
      <p>Parts Count: {{ store.partsCount }}</p>
      <p>Loading: {{ store.loading }}</p>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue';
import { usePurchaseOrderStore } from '../Stores/purchaseOrderStore';
import Select from 'primevue/select';
import Button from 'primevue/button';
import AddressFields from './AddressFields.vue';
import PurchaseOrderPartPicker from './PurchaseOrderPartPicker.vue';
import OrderSummary from './OrderSummary.vue';

const store = usePurchaseOrderStore();
const selectedSupplierId = ref<number | null>(null);
const isCreating = ref(false);

const canCreatePurchaseOrder = computed(() => {
  return store.selectedSupplier && store.partsCount > 0;
});

async function onSupplierChange(event: any) {
  const supplierId = event.value;
  if (supplierId) {
    try {
      await store.selectSupplier(supplierId);
    } catch (error) {
      console.error('Error selecting supplier:', error);
    }
  }
}

async function createPurchaseOrder() {
  isCreating.value = true;
  try {
    await store.createPurchaseOrder();
    // Handle successful creation (e.g., show a success message, redirect, etc.)
  } catch (error) {
    console.error('Failed to create purchase order:', error);
  } finally {
    isCreating.value = false;
  }
}

function resetPurchaseOrder() {
  store.resetSelection();
  selectedSupplierId.value = null;
}

onMounted(async () => {
  try {
    await store.fetchSuppliers();
  } catch (error) {
    console.error('Error fetching suppliers:', error);
  }
});
</script>

<style scoped>
.purchase-order-creation {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}
</style>


==== resources\js\Components\PurchaseOrderPartPicker.vue ====

<template>
  <div class="purchase-order-part-picker">
    <h2>Select Parts</h2>
    <DataTable
      :value="store.parts"
      v-model:selection="selectedParts"
      :paginator="true"
      :rows="10"
      dataKey="id"
      :filters="filters"
      filterDisplay="menu"
      :loading="store.loading"
      :globalFilterFields="['part_number', 'description']"
      @row-select="onRowSelect"
      @row-unselect="onRowUnselect"
    >
      <template #header>
        <div class="flex justify-content-between">
          <Button type="button" icon="pi pi-filter-slash" label="Clear" @click="clearFilter()" />
          <span class="p-input-icon-left">
            <i class="pi pi-search" />
            <InputText v-model="filters['global'].value" placeholder="Keyword Search" />
          </span>
        </div>
      </template>

      <Column selectionMode="multiple" headerStyle="width: 3rem"></Column>
      <Column field="part_number" header="Part Number" :sortable="true"></Column>
      <Column field="description" header="Description" :sortable="true"></Column>
      <Column field="unit_cost" header="Unit Cost" :sortable="true">
        <template #body="slotProps">
          {{ formatCurrency(slotProps.data.unit_cost) }}
        </template>
      </Column>
      <Column field="quantity" header="Quantity">
        <template #body="slotProps">
          <InputNumber
            v-model="slotProps.data.quantity"
            :min="0"
            @input="updatePartQuantity(slotProps.data)"
            showButtons
            buttonLayout="horizontal"
            incrementButtonIcon="pi pi-plus"
            decrementButtonIcon="pi pi-minus"
          />
        </template>
      </Column>
      <Column field="total_cost" header="Total Cost">
        <template #body="slotProps">
          {{ formatCurrency(slotProps.data.total_cost) }}
        </template>
      </Column>
    </DataTable>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue';
import { usePurchaseOrderStore } from '../Stores/purchaseOrderStore';
import DataTable from 'primevue/datatable';
import Column from 'primevue/column';
import InputNumber from 'primevue/inputnumber';
import Button from 'primevue/button';
import InputText from 'primevue/inputtext';

const store = usePurchaseOrderStore();
const selectedParts = ref([]);

const filters = ref({
  global: { value: null, matchMode: 'contains' },
});

function clearFilter() {
  initFilters();
}

function initFilters() {
  filters.value = {
    global: { value: null, matchMode: 'contains' },
  };
}

function formatCurrency(value: number) {
  return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);
}

function updatePartQuantity(part: any) {
  store.updatePartQuantity(part.id, part.quantity);
}

function onRowSelect(event: any) {
  updatePartQuantity({ ...event.data, quantity: 1 });
}

function onRowUnselect(event: any) {
  updatePartQuantity({ ...event.data, quantity: 0 });
}

onMounted(() => {
  initFilters();
});
</script>


==== resources\js\Components\ResponsiveCard.vue ====

<script setup>
const props = defineProps({
    spacingClasses: {
        type: String,
        required: false,
        default: 'p-4 py-6 sm:p-8',
    },
});
</script>

<template>
    <div
        class="bg-surface-0 dark:bg-surface-900 shadow rounded-none sm:rounded-xl overflow-hidden"
        :class="spacingClasses"
    >
        <slot />
    </div>
</template>


==== resources\js\Components\StepperFileUpload.vue ====

<template>
  <div class="card">
    <Stepper :value="activeStep">
      <!-- Step 1: Upload Catalog File (XLSM) -->
      <StepItem value="1">
        <Step>Upload Catalog File</Step>
        <StepPanel v-slot="{ activateCallback }">
          <div class="flex flex-col h-48">
            <h3 class="font-medium">Step 1: Upload Catalog File (XLSM)</h3>
            <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center">
              <FileUpload
                mode="basic"
                name="catalogFile"
                accept=".xlsm"
                :customUpload="true"
                @select="handleCatalogFile"
                chooseLabel="Choose Catalog File"
              />
              <span v-if="catalogFileName" class="ml-4">{{ catalogFileName }}</span>
            </div>
          </div>
          <div class="py-6">
            <Button label="Next" @click="nextStep(activateCallback, '2')" :disabled="!catalogFileSelected" />
          </div>
        </StepPanel>
      </StepItem>

      <!-- Step 2: Upload FBA File (TXT) -->
      <StepItem value="2">
        <Step>Upload FBA File</Step>
        <StepPanel v-slot="{ activateCallback }">
          <div class="flex flex-col h-48">
            <h3 class="font-medium">Step 2: Upload FBA File (TXT)</h3>
            <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center">
              <FileUpload
                mode="basic"
                name="fbaFile"
                accept=".txt"
                :customUpload="true"
                @select="handleFbaFile"
                chooseLabel="Choose FBA File"
              />
              <span v-if="fbaFileName" class="ml-4">{{ fbaFileName }}</span>
            </div>
          </div>
          <div class="flex py-6 gap-2">
            <Button label="Back" severity="secondary" @click="activateCallback('1')" />
            <Button label="Next" @click="nextStep(activateCallback, '3')" :disabled="!fbaFileSelected" />
          </div>
        </StepPanel>
      </StepItem>

      <!-- Step 3: Upload Files -->
      <StepItem value="3">
        <Step>Summary & Upload</Step>
        <StepPanel v-slot="{ activateCallback }">
          <div class="flex flex-col h-48">
            <h3 class="font-medium">Step 3: Summary</h3>
            <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center">
              <p>Catalog File: {{ catalogFileName }}</p>
              <p>FBA File: {{ fbaFileName }}</p>
            </div>
          </div>
          <div class="py-6">
            <Button label="Back" severity="secondary" @click="activateCallback('2')" />
            <Button label="Upload" @click="uploadFiles" />
          </div>
        </StepPanel>
      </StepItem>
    </Stepper>
  </div>
</template>

<script>
import Stepper from 'primevue/stepper';
import StepItem from 'primevue/stepitem';
import StepPanel from 'primevue/steppanel';
import FileUpload from 'primevue/fileupload';
import Button from 'primevue/button';

export default {
  components: {
    Stepper,
    StepItem,
    StepPanel,
    FileUpload,
    Button,
  },
  data() {
    return {
      activeStep: '1', // Current active step
      catalogFileName: '', // Catalog file name
      fbaFileName: '', // FBA file name
      catalogFile: null, // Actual file object
      fbaFile: null, // Actual file object
      catalogFileSelected: false, // Check if catalog file is selected
      fbaFileSelected: false, // Check if FBA file is selected
    };
  },
  methods: {
    handleCatalogFile(event) {
      this.catalogFile = event.files[0]; // Capture catalog file
      this.catalogFileName = this.catalogFile.name;
      this.catalogFileSelected = true;
    },
    handleFbaFile(event) {
      this.fbaFile = event.files[0]; // Capture FBA file
      this.fbaFileName = this.fbaFile.name;
      this.fbaFileSelected = true;
    },
    nextStep(activateCallback, nextStepValue) {
      activateCallback(nextStepValue);
      this.activeStep = nextStepValue;
    },
    async uploadFiles() {
      const formData = new FormData();
      formData.append('catalogFile', this.catalogFile);
      formData.append('fbaFile', this.fbaFile);
      formData.append('_token', document.querySelector('meta[name="csrf-token"]').getAttribute('content')); // Include CSRF token

      // Make the request to upload both files
      await this.$inertia.post('/catalogs/upload', formData, {
        onSuccess: () => {
          console.log('Files uploaded successfully!');
        },
        onError: (errors) => {
          console.error(errors);
        },
      });
    },
  },
};
</script>

<style scoped>

</style>


==== resources\js\Components\SupplierSelection.vue ====

<template>
  <div class="supplier-selection">
    <h2>Select Supplier</h2>
    <Dropdown
      v-model="selectedSupplierId"
      :options="supplierOptions"
      optionLabel="name"
      optionValue="id"
      placeholder="Select a Supplier"
      class="w-full md:w-14rem"
      :loading="supplierStore.loading"
      @change="onSupplierChange"
    />
    <small v-if="supplierStore.error" class="p-error">{{ supplierStore.error }}</small>
    <small v-if="supplierOptions.length === 0 && !supplierStore.loading" class="p-error">
      No suppliers available
    </small>

    <!-- Debug information -->
    <div class="debug-info" style="margin-top: 20px; padding: 10px;">
      <h3>Debug Info:</h3>
      <p>Loading: {{ supplierStore.loading }}</p>
      <p>Error: {{ supplierStore.error }}</p>
      <p>Suppliers count: {{ supplierOptions.length }}</p>
      <p>Selected Supplier ID: {{ selectedSupplierId }}</p>
      <p>
        Selected Supplier:
        {{ selectedSupplier ? JSON.stringify(selectedSupplier, null, 2) : 'None' }}
      </p>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, computed } from 'vue';
import { useSupplierStore } from '../Stores/supplierStore';
import Dropdown from 'primevue/dropdown';

const emit = defineEmits(['supplier-selected']);
const supplierStore = useSupplierStore();

// Store the selected supplier's ID
const selectedSupplierId = ref<number | null>(null);

// Computed property to get the supplier options
const supplierOptions = computed(() => {
  return supplierStore.suppliers.map(supplier => ({
    name: supplier.name,
    id: supplier.id
  }));
});

// Computed property to get the selected supplier object
const selectedSupplier = computed(() => {
  return supplierStore.suppliers.find(
    (supplier) => supplier.id === selectedSupplierId.value
  ) || null;
});

function onSupplierChange(event: any) {
  selectedSupplierId.value = event.value;
  if (selectedSupplier.value) {
    emit('supplier-selected', selectedSupplier.value);
  }
}

onMounted(async () => {
  await supplierStore.fetchSuppliers();
  console.log('Suppliers fetched:', supplierStore.suppliers);
});
</script>

<style scoped>
.supplier-selection {
  margin-bottom: 1rem;
}
</style>


==== resources\js\Components\ToggleThemeButton.vue ====

<script setup>
import { useTheme } from '@/Composables/useTheme.js';

const { currentTheme, setTheme } = useTheme();

function toggleTheme() {
    const newTheme = currentTheme.value === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
}
</script>

<template>
    <Button
        title="Change theme"
        :icon="currentTheme === 'light' ? 'pi pi-sun' : 'pi pi-moon'"
        @click="toggleTheme"
    />
</template>


==== resources\js\Composables\useDataTable.js ====

import { ref, computed } from 'vue';
import { router } from '@inertiajs/vue3';

export function useDataTable(defaultFilters = {}, only = ['urlParams']) {
    const dataTableDefaults = {
        filters: defaultFilters,
        sortField: '',
        sortOrder: 1,
        currentPage: 1,
        rowsPerPage: 20,
    };

    const filters = ref(dataTableDefaults.filters);
    const sortField = ref(dataTableDefaults.sortField);
    const sortOrder = ref(dataTableDefaults.sortOrder);
    const currentPage = ref(dataTableDefaults.currentPage);
    const rowsPerPage = ref(dataTableDefaults.rowsPerPage);

    const firstDatasetIndex = computed(() => {
        return (currentPage.value - 1) * rowsPerPage.value;
    });

    function fetchData() {
        return new Promise((resolve, reject) => {
            router.reload({
                only,
                data: {
                    filters: filters.value,
                    sortField: sortField.value,
                    sortOrder: sortOrder.value,
                    page: currentPage.value,
                    rows: rowsPerPage.value,
                },
                preserveState: true,
                onSuccess: (page) => {
                    resolve(page);
                },
                onError: (errors) => {
                    reject(errors);
                },
            });
        });
    }

    function onPage(event) {
        currentPage.value = event.page + 1;
        rowsPerPage.value = event.rows;
        fetchData().then(() => {
            scrollToTop();
        });
    }

    function onSort(event) {
        sortField.value = event.sortField;
        sortOrder.value = event.sortOrder;
        fetchData();
    }

    function onFilter(event) {
        currentPage.value = 1;
        filters.value = event.filters;
        fetchData();
    }

    function scrollToTop() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth',
        });
    }

    function reset() {
        filters.value = dataTableDefaults.filters;
        sortField.value = dataTableDefaults.sortField;
        sortOrder.value = dataTableDefaults.sortOrder;
        currentPage.value = dataTableDefaults.currentPage;
        rowsPerPage.value = dataTableDefaults.rowsPerPage;
        fetchData();
    }

    function parseUrlParams(urlParams) {
        filters.value = urlParams?.filters || dataTableDefaults.filters;
        sortField.value = urlParams?.sortField || dataTableDefaults.sortField;
        sortOrder.value =
            parseInt(urlParams?.sortOrder) || dataTableDefaults.sortOrder;
        currentPage.value =
            parseInt(urlParams?.page) || dataTableDefaults.currentPage;
        rowsPerPage.value =
            parseInt(urlParams?.rows) || dataTableDefaults.rowsPerPage;
    }

    return {
        filters,
        sortField,
        sortOrder,
        currentPage,
        rowsPerPage,
        firstDatasetIndex,
        onPage,
        onSort,
        onFilter,
        reset,
        fetchData,
        parseUrlParams,
    };
}


==== resources\js\Composables\useTheme.js ====

import { ref } from 'vue';

const currentTheme = ref(localStorage.getItem('selectedTheme') || 'light');

function initSiteTheme() {
    setTheme(currentTheme.value);
}

function setTheme(theme) {
    const domHtml = document.documentElement;
    domHtml.classList.toggle('dark-mode', theme === 'dark');
    saveThemePreference(theme);
}

function saveThemePreference(theme) {
    currentTheme.value = theme;
    localStorage.setItem('selectedTheme', theme);
}

export function useTheme() {
    return { initSiteTheme, setTheme, currentTheme };
}


==== resources\js\Interfaces\AddressDTO.ts ====

import { App } from '../Models/types';

export type AddressDTO = App.DTOs.AddressDTO;


==== resources\js\Layouts\AuthenticatedLayout.vue ====

<script setup>
import { ref, computed } from 'vue';
import { Link, usePage } from '@inertiajs/vue3';
import { useForm } from '@inertiajs/vue3';
import Toast from 'primevue/toast';
import Button from 'primevue/button';
import ApplicationLogo from '@/Components/ApplicationLogo.vue';
import Container from '@/Components/Container.vue';
import LinksMenu from '@/Components/LinksMenu.vue';
import LinksMenuBar from '@/Components/LinksMenuBar.vue';
import ToggleThemeButton from '@/Components/ToggleThemeButton.vue';
import MainMenu from '@/Components/MainMenu.vue';

const currentRoute = route().current();
const logoutForm = useForm({});
function logout() {
    logoutForm.post(route('logout'));
}

const menuItems = [
    {
        label: 'Dashboard',
        items: [
            { label: 'Dashboard', icon: 'pi pi-home', route: 'dashboard' }
        ]
    },
    {
        label: 'Purchasing',
        items: [
            { label: 'Create Purchase Order', icon: 'pi pi-plus', route: 'purchase-orders.create' },
            { label: 'Receive Purchase Order', icon: 'pi pi-inbox', route: 'purchase-orders.receive' },
            { label: 'View Purchase Orders', icon: 'pi pi-list', route: 'purchase-orders.index' }
        ]
    },
    {
        label: 'Production',
        items: [
            { label: 'Create Work Order', icon: 'pi pi-plus', route: 'work-orders.create' },
            { label: 'Modify Work Order', icon: 'pi pi-pencil', route: 'work-orders.modify' }
        ]
    }
];

// Top-level menu items for the top bar
const topMenuItems = computed(() =>
    menuItems.map(item => ({
        label: item.label,
        route: item.items[0].route,
        active: currentRoute.startsWith(item.label.toLowerCase()),
    }))
);

// User menu (desktop)
const userMenu = ref(null);
const userMenuItems = [
    {
        label: 'Profile',
        route: route('profile.edit'),
        icon: 'pi pi-fw pi-user',
    },
    {
        label: 'Log Out',
        icon: 'pi pi-fw pi-sign-out',
        command: () => {
            logout();
        },
    },
];
const toggleUserMenu = (event) => {
    userMenu.value.toggle(event);
};

// Main menu state
const mainMenuOpen = ref(false);
const toggleMainMenu = () => {
    mainMenuOpen.value = !mainMenuOpen.value;
};
</script>

<template>
    <div>
        <div class="min-h-screen">
            <nav
                class="bg-surface-0 dark:bg-surface-900 border-b"
                :class="
                    $slots.header
                        ? 'border-surface-100 dark:border-surface-800'
                        : 'border-surface-0 dark:border-surface-900 shadow'
                "
            >
                <!-- Primary Navigation Menu -->
                <Container>
                    <LinksMenuBar
                        :model="topMenuItems"
                        :pt="{
                            root: {
                                class: 'px-0 py-3 border-0 rounded-none',
                            },
                            button: {
                                class: 'hidden',
                            },
                        }"
                    >
                        <template #start>
                            <!-- Logo -->
                            <div class="shrink-0 flex items-center mr-5">
                                <Link :href="route('dashboard')">
                                    <ApplicationLogo
                                        class="block h-10 w-auto fill-current text-surface-900 dark:text-surface-0"
                                    />
                                </Link>
                            </div>

                            <!-- Main Menu Toggle Button -->
                            <Button
                                icon="pi pi-bars"
                                @click="toggleMainMenu"
                                class="p-button-text"
                            />
                        </template>
                        <template #end>
                            <div class="flex items-center md:ms-6">
                                <ToggleThemeButton
                                    text
                                    severity="secondary"
                                    rounded
                                />
                                <!-- User Dropdown Menu -->
                                <div class="ms-3 relative">
                                    <LinksMenu
                                        :model="userMenuItems"
                                        popup
                                        ref="userMenu"
                                        class="shadow"
                                    />
                                    <Button
                                        text
                                        size="small"
                                        severity="secondary"
                                        @click="toggleUserMenu($event)"
                                    >
                                        <span class="text-base">
                                            {{ $page.props.auth.user.name }}
                                        </span>
                                        <i class="pi pi-angle-down ml-1"></i>
                                    </Button>
                                </div>
                            </div>
                        </template>
                    </LinksMenuBar>
                </Container>
            </nav>

            <!-- Main Menu -->
            <MainMenu v-model:visible="mainMenuOpen" />

            <!-- Page Heading -->
            <header
                class="bg-surface-0 dark:bg-surface-900 shadow"
                v-if="$slots.header"
            >
                <Container>
                    <div class="py-6">
                        <slot name="header" />
                    </div>
                </Container>
            </header>

            <!-- Page Content -->
            <Toast />
            <main>
                <slot />
            </main>
        </div>
    </div>
</template>


==== resources\js\Layouts\GuestLayout.vue ====

<script setup>
import ApplicationLogo from '@/Components/ApplicationLogo.vue';
import ResponsiveCard from '@/Components/ResponsiveCard.vue';
import Toast from 'primevue/toast';
</script>

<template>
    <div
        class="min-h-screen flex flex-col sm:justify-center items-center pt-6 sm:pt-0"
    >
        <div>
            <Link href="/">
                <ApplicationLogo
                    class="w-20 h-20 fill-current text-surface-900 dark:text-surface-0"
                />
            </Link>
        </div>

        <div v-if="$slots.message" class="w-full sm:max-w-md mt-6 px-4 sm:px-0">
            <slot name="message" />
        </div>

        <div class="w-full sm:max-w-md mt-6">
            <Toast />
            <ResponsiveCard>
                <slot />
            </ResponsiveCard>
        </div>
    </div>
</template>


==== resources\js\Models\generated.d.ts ====

declare namespace App.DTOs {
  export type AddressDTO = {
    address1: string | null;
    address2: string | null;
    city: string | null;
    state_prov_code: string | null;
    zip: string | null;
    phone_number: string | null;
    email_address: string | null;
  };

  export type IdentifierDTO = {
    identifiers: Array<any>;
  };

  export type IdentifierData = {
    type: string | null;
    value: string | null;
  };

  export type LocationAddressesDTO = {
    billTo: any | null;
    shipFrom: any | null;
    shipTo: any | null;
    other: any | null;
  };

  export type ReplenishmentDataDTO = {
    lead_days: number;
    purchaseTerms: Array<any>;
  };

  export type SupplierAddressesDTO = {
    billTo: any | null;
    shipFrom: any | null;
    shipTo: any | null;
    returnTo: any | null;
  };
}

declare namespace App.Enums {
  export type DimensionType = 'box' | 'pallet' | 'individual_unit' | 'product' | 'packaging';
  export type InventoryQuantityType = 'quantity_onhand' | 'quantity_allocated' | 'quantity_backordered' | 'quantity_reserved' | 'quantity_intransit';
  export type PurchaseOrderStatus = 'draft' | 'submitted' | 'approved' | 'partially_received' | 'fully_received' | 'closed' | 'cancelled';
}

declare namespace App.Enums.Replenishment {
  export type RecommendedAction = 'None' | 'Reorder' | 'Restock' | 'Hold';
}

declare namespace App.InventoryTransactions.Enums {
  export type TransactionSourceType = 'purchase_order' | 'sales_order' | 'internal_transfer' | 'adjustment' | 'production' | 'return' | 'cycle_count';
  export type TransactionType = 'adjustment' | 'transfer' | 'receipt' | 'issue' | 'return' | 'cycle_count' | 'allocate' | 'reserve' | 'backorder';
}


==== resources\js\Models\index.ts ====

export * from './Model';
export * from './Supplier';
export * from './Location';
export * from './PurchaseOrder';
export * from './PurchaseOrderPart';
export * from './User';
export * from './Part';
export * from './Inventory';
export * from './types'


==== resources\js\Models\Inventory.ts ====

import { Model, Location } from './index';

export class Inventory extends Model {
  declare id: number;
  declare location_id: number;
  declare inventoryable_id: number;
  declare inventoryable_type: string;
  declare quantity: number;
  declare available_quantity: number;
  declare total_quantity: number;

  // Relationships
  declare location?: Location;
  declare inventoryable?: any; // This could be Part or Product, depending on the polymorphic relationship

  $attributes: {
    id: number;
    location_id: number;
    inventoryable_id: number;
    inventoryable_type: string;
    quantity: number;
    available_quantity: number;
    total_quantity: number;
  };

  constructor(data?: Partial<Inventory>) {
    super(data);
    this.$attributes = {
      id: this.id,
      location_id: this.location_id,
      inventoryable_id: this.inventoryable_id,
      inventoryable_type: this.inventoryable_type,
      quantity: this.quantity,
      available_quantity: this.available_quantity,
      total_quantity: this.total_quantity
    };
  }

  // Implement Orion-specific query methods
  static includes(): string[] {
    return ['location', 'inventoryable'];
  }

  static filterableBy(): string[] {
    return ['id', 'location_id', 'inventoryable_id', 'inventoryable_type', 'quantity', 'available_quantity', 'total_quantity'];
  }

  static sortableBy(): string[] {
    return ['id', 'location_id', 'inventoryable_id', 'inventoryable_type', 'quantity', 'available_quantity', 'total_quantity'];
  }

  static searchableBy(): string[] {
    return [];
  }

  static $query(): any {
    // This is a placeholder for the Orion query builder
    return {
      get: () => Promise.resolve([]),
      find: (id: number) => Promise.resolve(new Inventory()),
    };
  }

  $resource(): string {
    return 'inventory';
  }
}


==== resources\js\Models\Location.ts ====

import { Model } from '@tailflow/laravel-orion/lib/model';

interface Address {
  zip: string;
  city: string;
  address1: string;
  address2: string;
  phone_number: string;
  email_address: string;
  state_prov_code: string;
}

interface Addresses {
  other: Address[] | null;
  billTo: Address[];
  shipTo: Address[];
  shipFrom: Address[];
}

export class Location extends Model {
  id!: number;
  name!: string;
  virtual_type: string | null = null;
  addresses!: Addresses;
  type!: string;
  parent_id: number | null = null;
  supplier_id: number | null = null;
  created_at!: string;
  updated_at!: string;

  constructor(data?: Partial<Location>) {
    super();
    if (data) {
      this.$setAttributes(data);
      if (typeof this.addresses === 'string') {
        this.addresses = JSON.parse(this.addresses);
      }
    }
  }

  $resource(): string {
    return 'locations';
  }
}


==== resources\js\Models\Manufacturer.ts ====

import { Model } from "@tailflow/laravel-orion/lib/model";
import { HasMany } from "@tailflow/laravel-orion/lib/drivers/default/relations/hasMany";
import { Part } from "./Part";

export class Manufacturer extends Model<{
    id: number;
    name: string;
}, {
    created_at: string;
    updated_at: string;
    deleted_at: string | null;
}, {
    parts: Part[];
}> {
    public $resource(): string {
        return 'manufacturers';
    }

    public parts(): HasMany<Part> {
        return new HasMany(Part, this);
    }
}


==== resources\js\Models\Model.ts ====

export abstract class Model {
  declare id: number;

  constructor(data?: Partial<Model>) {
    Object.assign(this, data);
  }

  static includes(): string[] {
    return [];
  }

  static filterableBy(): string[] {
    return [];
  }

  static sortableBy(): string[] {
    return [];
  }

  static searchableBy(): string[] {
    return [];
  }
}


==== resources\js\Models\Part.ts ====

import { Model } from "@tailflow/laravel-orion/lib/model";
import { BelongsTo } from "@tailflow/laravel-orion/lib/drivers/default/relations/belongsTo";
import { HasMany } from "@tailflow/laravel-orion/lib/drivers/default/relations/hasMany";
import { Supplier } from "./Supplier";
import { Manufacturer } from "./Manufacturer";
import { PurchaseOrderPart } from "./PurchaseOrderPart";

interface IdentifierDTO {
    identifiers: Array<{ type: string; value: string }>;
}

interface ReplenishmentDataDTO {
    lead_days: number;
    purchaseTerms: Array<{ cost_per_part: number }>;
}

export class Part extends Model<{
    id: number;
    part_number: string;
    quantity: number;
    uom: string;
    description: string;
    identifiers: IdentifierDTO;
    regulatory_information: IdentifierDTO;
    replenishment_data: ReplenishmentDataDTO;
    supplier_id: number;
    manufacturer_id: number;
    created_at: string;
    updated_at: string;
    deleted_at: string | null;
    unit_cost: number;
    total_cost: number;
}, {}, {
    supplier: Supplier;
    manufacturer: Manufacturer;
    purchaseOrderParts: PurchaseOrderPart[];
}> {
    public $resource(): string {
        return 'parts';
    }

    public supplier(): BelongsTo<Supplier> {
        return new BelongsTo(Supplier, this);
    }

    public manufacturer(): BelongsTo<Manufacturer> {
        return new BelongsTo(Manufacturer, this);
    }

    public purchaseOrderParts(): HasMany<PurchaseOrderPart> {
        return new HasMany(PurchaseOrderPart, this);
    }

    public getUnitCost(): number {
        if (this.$attributes.replenishment_data &&
            this.$attributes.replenishment_data.purchaseTerms &&
            this.$attributes.replenishment_data.purchaseTerms.length > 0) {
            return this.$attributes.replenishment_data.purchaseTerms[0].cost_per_part;
        }
        return 0;
    }

    public calculateTotalCost(): number {
        const unitCost = this.getUnitCost();
        return unitCost * this.$attributes.quantity;
    }

    public updateQuantity(quantity: number): void {
        this.$attributes.quantity = quantity;
        this.$attributes.total_cost = this.calculateTotalCost();
    }

    public getIdentifierValue(type: string): string | null {
        const identifier = this.$attributes.identifiers.identifiers.find(i => i.type === type);
        return identifier ? identifier.value : null;
    }

    public getRegulatoryInformationValue(type: string): string | null {
        const info = this.$attributes.regulatory_information.identifiers.find(i => i.type === type);
        return info ? info.value : null;
    }

    get id(): number {
        return this.$attributes.id;
    }
}


==== resources\js\Models\PurchaseOrder.ts ====

import { Model } from '@tailflow/laravel-orion/lib/model';
import { BelongsTo } from '@tailflow/laravel-orion/lib/drivers/default/relations/belongsTo';
import { HasMany } from '@tailflow/laravel-orion/lib/drivers/default/relations/hasMany';
import { Supplier } from './Supplier';
import { Location } from './Location';
import { PurchaseOrderPart } from './PurchaseOrderPart';
import { User } from './User';

export type PurchaseOrderStatus = 'draft' | 'submitted' | 'approved' | 'partially_received' | 'fully_received' | 'closed' | 'cancelled';

export class PurchaseOrder extends Model<{
  id: number;
  number: string;
  supplier_id: number;
  location_id: number;
  status: PurchaseOrderStatus;
  total_cost: number | null;
  user_id: number;
  opened_at: string | null;
  closed_at: string | null;
  bill_to_address_index: number | null;
  ship_from_address_index: number | null;
  ship_to_address_index: number | null;
  created_at: string;
  updated_at: string;
  deleted_at: string | null;
}, {}, {
  supplier: Supplier;
  location: Location;
  parts: PurchaseOrderPart[];
  user: User;
}> {
  static $keyName = 'id';

  $resource(): string {
    return 'purchase-orders';
  }

  supplier(): BelongsTo<Supplier> {
    return new BelongsTo(Supplier, this);
  }

  location(): BelongsTo<Location> {
    return new BelongsTo(Location, this);
  }

  parts(): HasMany<PurchaseOrderPart> {
    return new HasMany(PurchaseOrderPart, this);
  }

  user(): BelongsTo<User> {
    return new BelongsTo(User, this);
  }

  $init(): void {
    // Initialization logic if needed
  }
}


==== resources\js\Models\PurchaseOrderPart.ts ====

import { Model } from '@tailflow/laravel-orion/lib/model';
import { BelongsTo } from '@tailflow/laravel-orion/lib/drivers/default/relations/belongsTo';
import { Part } from './Part';
import { PurchaseOrder } from './PurchaseOrder';

export class PurchaseOrderPart extends Model<{
  id: number;
  purchase_order_id: number;
  part_id: number;
  quantity_ordered: number;
  unit_cost: number | null;
  total_cost: number | null;
  quantity_invoiced: number;
  quantity_received: number;
  status: string | null;
  notes: string | null;
  created_at: string;
  updated_at: string;
  part?: Part;
}> {
  static $keyName = 'id';

  $resource(): string {
    return 'purchase-order-parts';
  }

  purchaseOrder(): BelongsTo<PurchaseOrder> {
    return new BelongsTo(PurchaseOrder, this);
  }

  part(): BelongsTo<Part> {
    return new BelongsTo(Part, this);
  }

  calculateTotalCost(): void {
    this.$attributes.total_cost = this.$attributes.quantity_ordered * (this.$attributes.unit_cost || 0);
  }

  static includes(): string[] {
    return ['purchaseOrder', 'part'];
  }

  static filterableBy(): string[] {
    return [
      'id',
      'purchase_order_id',
      'part_id',
      'quantity_ordered',
      'unit_cost',
      'total_cost',
      'quantity_invoiced',
      'quantity_received',
      'status',
    ];
  }

  static sortableBy(): string[] {
    return [
      'id',
      'quantity_ordered',
      'unit_cost',
      'total_cost',
      'quantity_invoiced',
      'quantity_received',
      'status',
    ];
  }

  static searchableBy(): string[] {
    return ['notes'];
  }

  $init(): void {
    // Initialization logic if needed
  }
}


==== resources\js\Models\Supplier.ts ====

import { Model } from '@tailflow/laravel-orion/lib/model';
import { Part } from './Part';

export class Supplier extends Model {
  id!: number;
  name!: string;
  account_number!: string;
  payment_terms!: string;
  lead_time_days!: number | null;
  free_shipping_threshold_usd!: number;
  contact!: string;
  addresses?: {
    billTo: any[];
    shipFrom: any[];
    shipTo: any[];
    returnTo: any[];
  };
  created_at!: string;
  updated_at!: string;
  deleted_at: string | null = null;
  part_count: number = 0;
  parts?: Part[];

  constructor(data?: Partial<Supplier>) {
    super();
    if (data) {
      this.$setAttributes(data);
    }
  }

  $resource(): string {
    return 'suppliers';
  }
}


==== resources\js\Models\types.ts ====

export namespace App.DTOs {
  export type AddressDTO = {
    address1: string | null;
    address2: string | null;
    city: string | null;
    state_prov_code: string | null;
    zip: string | null;
    phone_number: string | null;
    email_address: string | null;
  };

  export type IdentifierDTO = {
    identifiers: Array<any>;
  };

  export type IdentifierData = {
    type: string | null;
    value: string | null;
  };

  export type LocationAddressesDTO = {
    billTo: any | null;
    shipFrom: any | null;
    shipTo: any | null;
    other: any | null;
  };

  export type ReplenishmentDataDTO = {
    lead_days: number;
    purchaseTerms: Array<any>;
  };

  export type SupplierAddressesDTO = {
    billTo: any | null;
    shipFrom: any | null;
    shipTo: any | null;
    returnTo: any | null;
  };
}

export namespace App.Enums {
  export type DimensionType = 'box' | 'pallet' | 'individual_unit' | 'product' | 'packaging';
  export type InventoryQuantityType = 'quantity_onhand' | 'quantity_allocated' | 'quantity_backordered' | 'quantity_reserved' | 'quantity_intransit';
  export type PurchaseOrderStatus = 'draft' | 'submitted' | 'approved' | 'partially_received' | 'fully_received' | 'closed' | 'cancelled';
}

export namespace App.Enums.Replenishment {
  export type RecommendedAction = 'None' | 'Reorder' | 'Restock' | 'Hold';
}

export namespace App.InventoryTransactions.Enums {
  export type TransactionSourceType = 'purchase_order' | 'sales_order' | 'internal_transfer' | 'adjustment' | 'production' | 'return' | 'cycle_count';
  export type TransactionType = 'adjustment' | 'transfer' | 'receipt' | 'issue' | 'return' | 'cycle_count' | 'allocate' | 'reserve' | 'backorder';
}


==== resources\js\Models\User.ts ====

import { Model } from '@tailflow/laravel-orion/lib/model';

export class User extends Model<{
  id: number;
  name: string;
  email: string;
  email_verified_at?: string;
}> {
  $resource(): string {
    return 'users';
  }

  static includes(): string[] {
    return [];
  }

  static filterableBy(): string[] {
    return ['id', 'name', 'email', 'email_verified_at'];
  }

  static sortableBy(): string[] {
    return ['id', 'name', 'email', 'email_verified_at'];
  }

  static searchableBy(): string[] {
    return ['name', 'email'];
  }
}


==== resources\js\Pages\Auth\ForgotPassword.vue ====

<script setup>
import { useTemplateRef, onMounted } from 'vue';
import { useForm } from '@inertiajs/vue3';
import Message from 'primevue/message';
import GuestLayout from '@/Layouts/GuestLayout.vue';
import InputError from '@/Components/InputError.vue';

defineProps({
    status: {
        type: String,
    },
});

const emailInput = useTemplateRef('email-input');

const form = useForm({
    email: '',
});

const submit = () => {
    form.post(route('password.email'));
};

onMounted(() => {
    emailInput.value.$el.focus();
});
</script>

<template>
    <GuestLayout>
        <Head title="Forgot Password" />

        <template #message v-if="status">
            <Message severity="success" :closable="false" class="shadow">
                {{ status }}
            </Message>
        </template>

        <div class="mb-6 text-sm text-muted-color">
            Forgot your password? No problem. Just let us know your email
            address and we will email you a password reset link that will allow
            you to choose a new one.
        </div>

        <form @submit.prevent="submit">
            <div class="mb-6">
                <label for="email" class="block mb-2">Email</label>
                <InputText
                    required
                    ref="email-input"
                    id="email"
                    type="email"
                    v-model="form.email"
                    class="w-full"
                    :invalid="Boolean(form.errors.email)"
                    autocomplete="username"
                />
                <InputError class="mt-2" :message="form.errors.email" />
            </div>

            <div class="flex justify-end items-center">
                <Button
                    raised
                    type="submit"
                    :loading="form.processing"
                    label="Email Password Reset Link"
                    severity="contrast"
                />
            </div>
        </form>
    </GuestLayout>
</template>


==== resources\js\Pages\Auth\Login.vue ====

<script setup>
import { useTemplateRef, onMounted } from 'vue';
import { useForm } from '@inertiajs/vue3';
import Checkbox from 'primevue/checkbox';
import Message from 'primevue/message';
import GuestLayout from '@/Layouts/GuestLayout.vue';
import InputError from '@/Components/InputError.vue';

defineProps({
    canResetPassword: {
        type: Boolean,
    },
    status: {
        type: String,
    },
});

const emailInput = useTemplateRef('email-input');

const form = useForm({
    email: '',
    password: '',
    remember: false,
});

const submit = () => {
    form.post(route('login'), {
        onFinish: () => form.reset('password'),
    });
};

onMounted(() => {
    emailInput.value.$el.focus();
});
</script>

<template>
    <GuestLayout>
        <Head title="Log in" />

        <template #message v-if="status">
            <Message severity="success" :closable="false" class="shadow">
                {{ status }}
            </Message>
        </template>

        <form @submit.prevent="submit">
            <div class="mb-6">
                <label for="email" class="block mb-2">Email</label>
                <InputText
                    required
                    ref="email-input"
                    id="email"
                    type="email"
                    v-model="form.email"
                    class="w-full"
                    :invalid="Boolean(form.errors.email)"
                    autocomplete="username"
                />
                <InputError class="mt-2" :message="form.errors.email" />
            </div>

            <div class="mb-6">
                <label for="password" class="block mb-2">Password</label>
                <InputText
                    required
                    id="password"
                    type="password"
                    v-model="form.password"
                    class="w-full"
                    :invalid="Boolean(form.errors.password)"
                    autocomplete="current-password"
                />
                <InputError class="mt-2 mb-1" :message="form.errors.password" />
            </div>

            <div class="mb-8">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <Checkbox
                            id="remember"
                            :binary="true"
                            v-model="form.remember"
                            class="mr-2"
                        ></Checkbox>
                        <label for="remember">Remember me</label>
                    </div>
                </div>
            </div>

            <div class="flex justify-end items-center">
                <Link
                    v-if="canResetPassword"
                    :href="route('password.request')"
                    class="mr-4 underline text-muted-color hover:text-color"
                >
                    Forgot your password?
                </Link>
                <Button
                    raised
                    type="submit"
                    :loading="form.processing"
                    label="Log In"
                    severity="contrast"
                />
            </div>
        </form>
    </GuestLayout>
</template>


==== resources\js\Pages\Auth\Register.vue ====

<script setup>
import { useTemplateRef, onMounted } from 'vue';
import { useForm } from '@inertiajs/vue3';
import GuestLayout from '@/Layouts/GuestLayout.vue';
import InputError from '@/Components/InputError.vue';

const form = useForm({
    name: '',
    email: '',
    password: '',
    password_confirmation: '',
});

const nameInput = useTemplateRef('name-input');

const submit = () => {
    form.post(route('register'), {
        onFinish: () => form.reset('password', 'password_confirmation'),
    });
};

onMounted(() => {
    nameInput.value.$el.focus();
});
</script>

<template>
    <GuestLayout>
        <Head title="Register" />

        <form @submit.prevent="submit">
            <div class="mb-6">
                <label for="name" class="block mb-2">Name</label>
                <InputText
                    ref="name-input"
                    id="name"
                    type="text"
                    v-model="form.name"
                    class="w-full"
                    :invalid="Boolean(form.errors.name)"
                    required
                    autocomplete="name"
                />
                <InputError class="mt-2" :message="form.errors.name" />
            </div>

            <div class="mb-6">
                <label for="email" class="block mb-2">Email</label>
                <InputText
                    id="email"
                    type="email"
                    v-model="form.email"
                    class="w-full"
                    :invalid="Boolean(form.errors.email)"
                    required
                    autocomplete="username"
                />
                <InputError class="mt-2" :message="form.errors.email" />
            </div>

            <div class="mb-6">
                <label for="password" class="block mb-2">Password</label>
                <InputText
                    id="password"
                    type="password"
                    v-model="form.password"
                    class="w-full"
                    :invalid="Boolean(form.errors.password)"
                    required
                    autocomplete="new-password"
                />
                <InputError class="mt-2 mb-1" :message="form.errors.password" />
            </div>

            <div class="mb-6">
                <label for="password_confirmation" class="block mb-2"
                    >Confirm Password</label
                >
                <InputText
                    id="password_confirmation"
                    type="password"
                    v-model="form.password_confirmation"
                    class="w-full"
                    :invalid="Boolean(form.errors.password_confirmation)"
                    required
                    autocomplete="new-password"
                />
                <InputError
                    class="mt-2 mb-1"
                    :message="form.errors.password_confirmation"
                />
            </div>

            <div class="flex justify-end items-center">
                <Link
                    :href="route('login')"
                    class="mr-4 text-muted-color underline text-muted-color hover:text-color"
                >
                    Already registered?
                </Link>
                <Button
                    raised
                    type="submit"
                    :loading="form.processing"
                    label="Register"
                    severity="contrast"
                />
            </div>
        </form>
    </GuestLayout>
</template>


==== resources\js\Pages\Auth\ResetPassword.vue ====

<script setup>
import { useTemplateRef, onMounted } from 'vue';
import { useForm } from '@inertiajs/vue3';
import GuestLayout from '@/Layouts/GuestLayout.vue';
import InputError from '@/Components/InputError.vue';

const props = defineProps({
    email: {
        type: String,
        required: true,
    },
    token: {
        type: String,
        required: true,
    },
});

const emailInput = useTemplateRef('email-input');

const form = useForm({
    token: props.token,
    email: props.email,
    password: '',
    password_confirmation: '',
});

const submit = () => {
    form.post(route('password.store'), {
        onFinish: () => form.reset('password', 'password_confirmation'),
    });
};

onMounted(() => {
    emailInput.value.$el.focus();
});
</script>

<template>
    <GuestLayout>
        <Head title="Reset Password" />

        <form @submit.prevent="submit">
            <div class="mb-6">
                <label for="email" class="block mb-2">Email</label>
                <InputText
                    ref="email-input"
                    id="email"
                    type="email"
                    v-model="form.email"
                    class="w-full"
                    :invalid="Boolean(form.errors.email)"
                    required
                    autocomplete="username"
                />
                <InputError class="mt-2" :message="form.errors.email" />
            </div>

            <div class="mb-6">
                <label for="password" class="block mb-2">Password</label>
                <InputText
                    id="password"
                    type="password"
                    v-model="form.password"
                    class="w-full"
                    :invalid="Boolean(form.errors.password)"
                    required
                    autocomplete="new-password"
                />
                <InputError class="mt-2 mb-1" :message="form.errors.password" />
            </div>

            <div class="mb-6">
                <label for="password_confirmation" class="block mb-2"
                    >Password</label
                >
                <InputText
                    id="password_confirmation"
                    type="password"
                    v-model="form.password_confirmation"
                    class="w-full"
                    :invalid="Boolean(form.errors.password_confirmation)"
                    required
                    autocomplete="new-password"
                />
                <InputError
                    class="mt-2 mb-1"
                    :message="form.errors.password_confirmation"
                />
            </div>

            <div class="flex justify-end items-center">
                <Button
                    raised
                    type="submit"
                    :loading="form.processing"
                    label="Reset Password"
                    severity="contrast"
                />
            </div>
        </form>
    </GuestLayout>
</template>


==== resources\js\Pages\Auth\VerifyEmail.vue ====

<script setup>
import { computed } from 'vue';
import { useForm } from '@inertiajs/vue3';
import Message from 'primevue/message';
import GuestLayout from '@/Layouts/GuestLayout.vue';

const props = defineProps({
    status: {
        type: String,
    },
});

const form = useForm({});

const submit = () => {
    form.post(route('verification.send'));
};

const verificationLinkSent = computed(
    () => props.status === 'verification-link-sent'
);
</script>

<template>
    <GuestLayout>
        <Head title="Email Verification" />

        <template #message v-if="verificationLinkSent">
            <Message severity="success" :closable="false" class="shadow">
                A new verification link has been sent to the email address you
                provided during registration.
            </Message>
        </template>

        <div class="mb-6 text-sm text-muted-color">
            Thanks for signing up! Before getting started, could you verify your
            email address by clicking on the link we just emailed to you? If you
            didn't receive the email, we will gladly send you another.
        </div>

        <form @submit.prevent="submit">
            <div class="mt-6 flex justify-between items-center">
                <Button
                    raised
                    type="submit"
                    :loading="form.processing"
                    label="Resend Verification Email"
                    severity="contrast"
                />
                <Link
                    :href="route('logout')"
                    method="post"
                    class="text-muted-color underline text-muted-color hover:text-color"
                    >Log Out</Link
                >
            </div>
        </form>
    </GuestLayout>
</template>


==== resources\js\Pages\CreatePurchaseOrderByPart.php ====

<script setup>
    import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
    import Container from '@/Components/Container.vue';
    import ResponsiveCard from '@/Components/ResponsiveCard.vue';
    import CreatePurchaseOrder from './PurchaseOrders/CreatePurchaseOrder.vue';
</script>

<template>

    <Head title="Dashboard" />
    <AuthenticatedLayout>
        <template #header>
            <h2 class="font-bold text-xl leading-tight">Create Purchase Order</h2>
            <h4 class="text-md leading-tight">by Part</h4>
        </template>
        <Container :spaced-mobile="false">
            <div class="py-12">
                <ResponsiveCard>
                    <CreatePurchaseOrder />
                </ResponsiveCard>
            </div>
        </Container>
    </AuthenticatedLayout>
</template>

==== resources\js\Pages\Dashboard.vue ====

<script setup>
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
import Container from '@/Components/Container.vue';
import UploadAmazonFiles from '@/Pages/Imports/Partials/UploadAmazonFiles.vue';
import ResponsiveCard from '@/Components/ResponsiveCard.vue';
</script>

<template>
    <Head title="Dashboard" />
    <AuthenticatedLayout>
        <template #header>
            <h2 class="font-bold text-xl leading-tight">Dashboard</h2>
        </template>
        <Container :spaced-mobile="false">
            <div class="py-12">
                <ResponsiveCard>
                    <UploadAmazonFiles/>
                </ResponsiveCard>
            </div>
        </Container>
    </AuthenticatedLayout>
</template>


==== resources\js\Pages\Imports\ImportAmazonData.vue ====



==== resources\js\Pages\Imports\Partials\UploadAmazonFiles.vue ====

<template>
  <div>
    <h1>Amazon Files Upload</h1>
    <Steps :model="steps" :activeIndex="activeStep" />

    <!-- Step 1: Upload Category+Listings+Report.xlsm -->
    <div v-if="activeStep === 0">
      <h2>Step 1: Upload Category+Listings+Report.xlsm</h2>
      <input
        type="file"
        @change="handleCategoryFileSelection"
        accept=".xlsm"
      />
      <p v-if="categoryFileName">Selected file: {{ categoryFileName }}</p>
      <Button label="Next" :disabled="!categoryFileValidated" @click="goToStep(1)" />
    </div>

    <!-- Step 2: Upload Amazon-fulfilled+Inventory.txt -->
    <div v-if="activeStep === 1">
      <h2>Step 2: Upload Amazon-fulfilled+Inventory.txt</h2>
      <input
        type="file"
        @change="handleFbaFileSelection"
        accept=".txt"
      />
      <p v-if="fnskuFileName">Selected file: {{ fnskuFileName }}</p>
      <Button label="Next" :disabled="!fnskuFileValidated" @click="goToStep(2)" />
    </div>

    <!-- Step 3: Confirm and Upload -->
    <div v-if="activeStep === 2">
      <h2>Step 3: Confirm and Upload</h2>
      <div>
        <p>Category+Listings+Report.xlsm: {{ categoryFileName }}</p>
        <p>Amazon-fulfilled+Inventory.txt: {{ fnskuFileName }}</p>
      </div>
      <Button label="Upload" :disabled="!canUpload" @click="submitForm" />
    </div>
  </div>
</template>

<script>
import { useForm } from '@inertiajs/vue3';
import Steps from 'primevue/steps';
import Button from 'primevue/button';

export default {
  name: "UploadAmazonFiles",
  components: {
    Steps,
    Button,
  },
  data() {
    return {
      activeStep: 0,
      steps: [
        { label: "Upload Category+Listings+Report.xlsm" },
        { label: "Upload Amazon-fulfilled+Inventory.txt" },
        { label: "Confirm and Upload" },
      ],
      categoryFileName: null,
      fnskuFileName: null,
      categoryFileValidated: false,
      fnskuFileValidated: false,
      categoryFile: null,  // Holds actual file object for upload
      fnskuFile: null,       // Holds actual file object for upload
    };
  },
  computed: {
    canUpload() {
      return this.categoryFileValidated && this.fnskuFileValidated;
    },
  },
  methods: {
    goToStep(step) {
      if (step >= 0 && step < this.steps.length) {
        this.activeStep = step;
      }
    },

    // Regex to match either file type with date pattern
    validateFileName(fileName, fileType) {
      const expectedFileRegex = /(Category\+Listings\+Report|Amazon-fulfilled\+Inventory)\+\d{2}-\d{2}-\d{4}\.(xlsm|txt)/;
      return expectedFileRegex.test(fileName) && fileName.endsWith(fileType);
    },

    // Handle Category File Selection
    handleCategoryFileSelection(event) {
      const file = event.target.files[0];

      if (file && this.validateFileName(file.name, '.xlsm')) {
        this.categoryFileName = file.name;
        this.categoryFileValidated = true;
        this.categoryFile = file;  // Store the actual file for upload
        this.goToStep(1);  // Advance to next step after validation
      } else {
        this.$toast.add({
          severity: 'error',
          summary: 'Invalid File',
          detail: 'The file does not match the required pattern (Category+Listings+Report+MM-DD-YYYY.xlsm).'
        });
        this.categoryFileValidated = false;
        this.categoryFile = null;
      }
    },

    // Handle FBA File Selection
    handleFbaFileSelection(event) {
      const file = event.target.files[0];

      if (file && this.validateFileName(file.name, '.txt')) {
        this.fnskuFileName = file.name;
        this.fnskuFileValidated = true;
        this.fnskuFile = file;  // Store the actual file for upload
        this.goToStep(2);  // Advance to next step after validation
      } else {
        this.$toast.add({
          severity: 'error',
          summary: 'Invalid File',
          detail: 'The file does not match the required pattern (Amazon-fulfilled+Inventory+MM-DD-YYYY.txt).'
        });
        this.fnskuFileValidated = false;
        this.fnskuFile = null;
      }
    },

    // Submit the form
    submitForm() {
      const form = useForm({
        categoryFile: this.categoryFile,
        fnskuFile: this.fnskuFile,
      });

      const formData = new FormData();
      formData.append('categoryFile', this.categoryFile);
      formData.append('fnskuFile', this.fnskuFile);

        form.post(route('catalog.upload'), {
        forceFormData: true,
        data: formData,
        onSuccess: () => {
          this.$toast.add({
            severity: 'success',
            summary: 'Success',
            detail: 'Files uploaded successfully!'
          });
        },
        onError: (errors) => {
          this.$toast.add({
            severity: 'error',
            summary: 'Error',
            detail: 'There was an issue uploading the files.'
          });
        },
      });
    },
  },
};
</script>

<style scoped>
h2 {
  margin-top: 20px;
}
</style>


==== resources\js\Pages\Profile\Edit.vue ====

<script setup>
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
import Container from '@/Components/Container.vue';
import ResponsiveCard from '@/Components/ResponsiveCard.vue';
import DeleteUserForm from './Partials/DeleteUserForm.vue';
import UpdatePasswordForm from './Partials/UpdatePasswordForm.vue';
import UpdateProfileInformationForm from './Partials/UpdateProfileInformationForm.vue';

const props = defineProps({
    auth: Object,
    mustVerifyEmail: {
        type: Boolean,
    },
    status: {
        type: String,
    },
});
</script>

<template>
    <Head title="Profile" />

    <AuthenticatedLayout>
        <template #header>
            <h2 class="font-bold text-xl leading-tight">Profile</h2>
        </template>

        <Container :spaced-mobile="false">
            <div class="py-12">
                <div class="space-y-6">
                    <ResponsiveCard>
                        <UpdateProfileInformationForm
                            :must-verify-email="mustVerifyEmail"
                            :status="status"
                            class="max-w-xl"
                        />
                    </ResponsiveCard>

                    <ResponsiveCard>
                        <UpdatePasswordForm class="max-w-xl" />
                    </ResponsiveCard>

                    <ResponsiveCard>
                        <DeleteUserForm class="max-w-xl" />
                    </ResponsiveCard>
                </div>
            </div>
        </Container>
    </AuthenticatedLayout>
</template>


==== resources\js\Pages\Profile\Partials\DeleteUserForm.vue ====

<script setup>
import { ref, useTemplateRef } from 'vue';
import { useForm } from '@inertiajs/vue3';
import Dialog from 'primevue/dialog';
import InputError from '@/Components/InputError.vue';

const passwordInput = useTemplateRef('password-input');
const modalOpen = ref(false);

const form = useForm({
    password: '',
});

const deleteUser = () => {
    form.delete(route('profile.destroy'), {
        preserveScroll: true,
        onSuccess: () => (modalOpen.value = false),
        onError: () => passwordInput.value.$el.focus(),
        onFinish: () => form.reset(),
    });
};

function focusPasswordInput() {
    passwordInput.value.$el.focus();
}
</script>

<template>
    <section class="space-y-6">
        <Dialog
            :draggable="false"
            position="center"
            v-model:visible="modalOpen"
            modal
            header="Are you sure you want to delete your account?"
            :style="{ width: '40rem' }"
            @show="focusPasswordInput"
        >
            <div class="mb-6">
                <p class="m-0 text-muted-color">
                    Once your account is deleted, all of its resources and data
                    will be permanently deleted. Please enter your password to
                    confirm you would like to permanently delete your account.
                </p>
            </div>

            <div>
                <InputText
                    autofocus
                    required
                    id="password"
                    ref="password-input"
                    type="password"
                    placeholder="Password"
                    v-model="form.password"
                    class="w-full"
                    :invalid="Boolean(form.errors.password)"
                    autocomplete="current-password"
                    @keyup.enter="deleteUser"
                />
                <InputError class="mt-2" :message="form.errors.password" />
            </div>

            <template #footer>
                <Button
                    class="mr-2"
                    label="Cancel"
                    plain
                    text
                    @click="modalOpen = false"
                />
                <Button
                    raised
                    @click="deleteUser"
                    :loading="form.processing"
                    label="Delete Account"
                    severity="danger"
                />
            </template>
        </Dialog>

        <header>
            <h2 class="text-lg font-medium mt-0 mb-2">Delete Account</h2>
            <p class="mb-0 text-sm text-muted-color">
                Once your account is deleted, all of its resources and data will
                be permanently deleted. Before deleting your account, please
                download any data or information that you wish to retain.
            </p>
        </header>

        <Button
            raised
            @click="modalOpen = true"
            label="Delete Account"
            severity="danger"
        />
    </section>
</template>


==== resources\js\Pages\Profile\Partials\UpdatePasswordForm.vue ====

<script setup>
import { useTemplateRef } from 'vue';
import { useForm } from '@inertiajs/vue3';
import { useToast } from 'primevue/usetoast';
import InputError from '@/Components/InputError.vue';

const currentPasswordInput = useTemplateRef('current-password-input');
const newPasswordInput = useTemplateRef('new-password-input');

const toast = useToast();
const form = useForm({
    current_password: '',
    password: '',
    password_confirmation: '',
});

const showSuccessToast = () => {
    toast.add({
        severity: 'success',
        summary: 'Saved',
        detail: 'Your password has been updated',
        life: 3000,
    });
};
const updatePassword = () => {
    form.put(route('password.update'), {
        preserveScroll: true,
        onSuccess: () => {
            form.reset();
            showSuccessToast();
        },
        onError: () => {
            if (form.errors?.password) {
                form.reset('password', 'password_confirmation');
                newPasswordInput.value.$el.focus();
            }
            if (form.errors?.current_password) {
                form.reset('current_password');
                currentPasswordInput.value.$el.focus();
            }
        },
    });
};
</script>

<template>
    <section>
        <header>
            <h2 class="text-lg font-medium mt-0 mb-2">Update Password</h2>
            <p class="mb-0 text-sm text-muted-color">
                Ensure your account is using a long, random password to stay
                secure.
            </p>
        </header>

        <form @submit.prevent="updatePassword" class="mt-6 space-y-6">
            <div>
                <label for="current_password" class="block mb-2"
                    >Current Password</label
                >
                <InputText
                    required
                    id="current_password"
                    ref="current-password-input"
                    type="password"
                    v-model="form.current_password"
                    class="w-full"
                    :invalid="Boolean(form.errors.current_password)"
                    autocomplete="current-password"
                />
                <InputError
                    class="mt-2"
                    :message="form.errors?.current_password"
                />
            </div>

            <div>
                <label for="password" class="block mb-2">New Password</label>
                <InputText
                    required
                    id="password"
                    ref="new-password-input"
                    type="password"
                    v-model="form.password"
                    class="w-full"
                    :invalid="Boolean(form.errors.password)"
                    autocomplete="new-password"
                />
                <InputError class="mt-2" :message="form.errors?.password" />
            </div>

            <div>
                <label for="password_confirmation" class="block mb-2"
                    >Confirm Password</label
                >
                <InputText
                    required
                    id="password_confirmation"
                    type="password"
                    v-model="form.password_confirmation"
                    class="w-full"
                    :invalid="Boolean(form.errors.password_confirmation)"
                    autocomplete="new-password"
                />
                <InputError
                    class="mt-2"
                    :message="form.errors?.password_confirmation"
                />
            </div>

            <div class="flex items-center gap-4">
                <Button
                    raised
                    type="submit"
                    :loading="form.processing"
                    label="Save"
                    severity="contrast"
                />

                <Transition
                    enter-active-class="transition ease-in-out"
                    enter-from-class="opacity-0"
                    leave-active-class="transition ease-in-out"
                    leave-to-class="opacity-0"
                >
                    <p
                        v-if="form.recentlySuccessful"
                        class="text-sm text-muted-color"
                    >
                        Saved.
                    </p>
                </Transition>
            </div>
        </form>
    </section>
</template>


==== resources\js\Pages\Profile\Partials\UpdateProfileInformationForm.vue ====

<script setup>
import { useTemplateRef, onMounted } from 'vue';
import { useForm, usePage } from '@inertiajs/vue3';
import { useToast } from 'primevue/usetoast';
import Message from 'primevue/message';
import InputError from '@/Components/InputError.vue';

defineProps({
    mustVerifyEmail: {
        type: Boolean,
    },
    status: {
        type: String,
    },
});

const nameInput = useTemplateRef('name-input');

const user = usePage().props.auth.user;
const toast = useToast();
const form = useForm({
    name: user.name,
    email: user.email,
});

const showSuccessToast = () => {
    toast.add({
        severity: 'success',
        summary: 'Saved',
        detail: 'Profile information has been updated',
        life: 3000,
    });
};
const updateProfileInformation = () => {
    form.patch(route('profile.update'), {
        preserveScroll: true,
        onSuccess: () => {
            showSuccessToast();
        },
    });
};

onMounted(() => {
    nameInput.value.$el.focus();
});
</script>

<template>
    <section>
        <header>
            <h2 class="text-lg font-medium mt-0 mb-2">Profile Information</h2>
            <p class="mb-0 text-sm text-muted-color">
                Update your account's profile information and email address.
            </p>
        </header>

        <form @submit.prevent="updateProfileInformation" class="mt-6 space-y-6">
            <div>
                <label for="name" class="block mb-2">Name</label>
                <InputText
                    required
                    ref="name-input"
                    id="name"
                    type="text"
                    v-model="form.name"
                    class="w-full"
                    :invalid="Boolean(form.errors.name)"
                    autocomplete="name"
                />
                <InputError class="mt-2" :message="form.errors?.name" />
            </div>
            <div>
                <label for="email" class="block mb-2">Email</label>
                <InputText
                    required
                    id="email"
                    type="email"
                    v-model="form.email"
                    class="w-full"
                    :invalid="Boolean(form.errors.email)"
                    autocomplete="username"
                />
                <InputError class="mt-2" :message="form.errors?.email" />
            </div>

            <div v-if="mustVerifyEmail && user.email_verified_at === null">
                <p class="text-sm mt-2">
                    Your email address is unverified.
                    <Link
                        :href="route('verification.send')"
                        method="post"
                        class="underline text-sm text-muted-color underline text-muted-color hover:text-color"
                    >
                        Click here to re-send the verification email.
                    </Link>
                </p>

                <Message
                    v-if="status === 'verification-link-sent'"
                    severity="success"
                    :closable="false"
                    class="shadow mt-4"
                >
                    A new verification link has been sent to your email address.
                </Message>
            </div>

            <div class="flex items-center gap-4">
                <Button
                    raised
                    type="submit"
                    :loading="form.processing"
                    label="Save"
                    severity="contrast"
                />

                <Transition
                    enter-active-class="transition ease-in-out"
                    enter-from-class="opacity-0"
                    leave-active-class="transition ease-in-out"
                    leave-to-class="opacity-0"
                >
                    <p
                        v-if="form.recentlySuccessful"
                        class="text-sm text-muted-color"
                    >
                        Saved.
                    </p>
                </Transition>
            </div>
        </form>
    </section>
</template>


==== resources\js\Pages\PurchaseOrders\Create.vue ====

<template>
  <Head title="Create Purchase Order" />
  <h1 class="text-2xl font-semibold mb-4">Create Purchase Order</h1>
  <PurchaseOrderCreation />
</template>

<script setup>
import { Head } from '@inertiajs/vue3';
import PurchaseOrderCreation from '../../Components/PurchaseOrderCreation.vue';
</script>


==== resources\js\Pages\Welcome.vue ====

<script setup>
import ResponsiveCard from '@/Components/ResponsiveCard.vue';
import ToggleThemeButton from '@/Components/ToggleThemeButton.vue';

defineProps({
    canLogin: {
        type: Boolean,
    },
    canRegister: {
        type: Boolean,
    },
    laravelVersion: {
        type: String,
        required: true,
    },
    phpVersion: {
        type: String,
        required: true,
    },
});
</script>

<template>
    <Head title="Welcome" />

    <div class="min-h-full">
        <div class="h-screen flex items-center justify-center">
            <ResponsiveCard spacing-classes="p-4 py-6 sm:p-12">
                <div class="text-center md:text-left">
                    <span class="block text-6xl font-bold mb-1"
                        >Laravel Breeze</span
                    >
                    <div class="text-6xl text-primary font-bold mb-4">
                        & PrimeVue
                    </div>
                    <p class="mt-0 mb-1 text-muted-color leading-normal">
                        A starter kit using the Vue/Inertia option for
                        <a
                            href="https://laravel.com/docs/master/starter-kits#laravel-breeze"
                            class="underline text-primary hover:text-color"
                            >Laravel Breeze</a
                        >,
                    </p>
                    <p class="mt-0 mb-6 text-muted-color leading-normal">
                        utilizing
                        <a
                            href="https://primevue.org/"
                            class="underline text-primary hover:text-color"
                            >PrimeVue</a
                        >
                        components
                    </p>
                    <template v-if="$page.props.auth.user">
                        <Link :href="route('dashboard')">
                            <Button
                                raised
                                label="Dashboard"
                                icon="pi pi-home"
                                class="mr-4"
                            />
                        </Link>
                        <Link :href="route('profile.edit')">
                            <Button
                                outlined
                                label="Profile"
                                icon="pi pi-user"
                                class="mr-4"
                            />
                        </Link>
                    </template>
                    <template v-else>
                        <Link :href="route('login')">
                            <Button
                                raised
                                label="Login"
                                icon="pi pi-sign-in"
                                class="mr-4"
                            />
                        </Link>
                        <Link :href="route('register')">
                            <Button
                                outlined
                                label="Register"
                                icon="pi pi-user-plus"
                                class="mr-4"
                            />
                        </Link>
                    </template>
                    <ToggleThemeButton outlined />
                    <div class="mt-6">
                        <p class="m-0 text-sm text-muted-color">
                            Laravel v{{ laravelVersion }} (PHP v{{
                                phpVersion
                            }})
                        </p>
                    </div>
                </div>
            </ResponsiveCard>
        </div>
    </div>
</template>


==== resources\js\Pages\WorkOrders\Create.vue ====

<script setup>
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
import { Head } from '@inertiajs/vue3';
</script>

<template>
    <Head title="Create Work Order" />

    <AuthenticatedLayout>
        <template #header>
            <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">Create Work Order</h2>
        </template>

        <div class="py-12">
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                    <div class="p-6 text-gray-900 dark:text-gray-100">
                        Create Work Order Page
                    </div>
                </div>
            </div>
        </div>
    </AuthenticatedLayout>
</template>


==== resources\js\Pages\WorkOrders\Modify.vue ====

<script setup>
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
import { Head } from '@inertiajs/vue3';
</script>

<template>
    <Head title="Modify Work Order" />

    <AuthenticatedLayout>
        <template #header>
            <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">Modify Work Order</h2>
        </template>

        <div class="py-12">
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                    <div class="p-6 text-gray-900 dark:text-gray-100">
                        Modify Work Order Page
                    </div>
                </div>
            </div>
        </div>
    </AuthenticatedLayout>
</template>


==== resources\js\Plugins\purchaseOrderPlugin.ts ====

import { PiniaPluginContext } from 'pinia'

export function purchaseOrderPlugin({ store }: PiniaPluginContext) {
  if (store.$id === 'purchaseOrder') {
    store.$state.creationTime = new Date()

    // Add a subscription to save state to localStorage
    store.$subscribe((mutation, state) => {
      localStorage.setItem('purchaseOrderState', JSON.stringify(state))
    })

    // Extend the store with a new property
    return {
      creationTime: new Date(),
    }
  }
}

// Extend the PiniaCustomProperties interface
declare module 'pinia' {
  export interface PiniaCustomProperties {
    creationTime?: Date
  }
}


==== resources\js\Stores\locationStore.ts ====

import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import { Location } from '../Models/Location';
import api from '../api';

export const useLocationStore = defineStore('location', () => {
  const locations = ref<Location[]>([]);
  const loading = ref(false);
  const error = ref<string | null>(null);

  const warehouseLocations = computed(() => {
    return locations.value.filter(location => location.type === 'warehouse');
  });

  async function fetchLocations() {
    loading.value = true;
    error.value = null;
    try {
      const response = await api.get('/locations');
      locations.value = response.data.data.map((item: any) => new Location(item));
      console.log('Fetched locations:', locations.value);
    } catch (err: any) {
      console.error('Failed to fetch locations:', err);
      error.value = err.message || 'Failed to fetch locations';
    } finally {
      loading.value = false;
    }
  }

  return {
    locations,
    warehouseLocations,
    loading,
    error,
    fetchLocations,
  };
});


==== resources\js\Stores\partStore.ts ====

// partStore.ts
import { defineStore } from 'pinia';
import { Part } from '@/Models/Part';
import api from '../api';

export const usePartStore = defineStore('part', {
  state: () => ({
    parts: [] as Part[],
    loading: false,
    error: null as string | null,
  }),
  getters: {
    getParts: (state) => state.parts,
    getLoading: (state) => state.loading,
    getError: (state) => state.error,
  },
  actions: {

      async fetchPartsBySupplier(supplierId: number) {
          this.loading = true;
          this.error = null;
          try {
              const response = await api.get(`/parts`, {
                  params: { 'filter[supplier_id]': supplierId },
              });
              this.parts = response.data.data.map((item: any) => new Part(item));
              console.log('Fetched parts:', this.parts);
          } catch (error: any) {
              console.error('Error fetching parts:', error);
              this.error = error.message || 'An error occurred while fetching parts';
          } finally {
              this.loading = false;
          }
      },

    async fetchParts() {
      this.loading = true;
      this.error = null;
      try {
        const response = await api.get('/parts');
        this.parts = response.data.data.map((item: any) => new Part(item));
      } catch (error: any) {
        console.error('Error fetching parts:', error);
        this.error = error.message || 'An error occurred while fetching parts';
      } finally {
        this.loading = false;
      }
    },
    async createPart(partData: Partial<Part>) {
      this.loading = true;
      this.error = null;
      try {
        const response = await api.post('/parts', partData);
        const newPart = new Part(response.data.data);
        this.parts.push(newPart);
        return newPart;
      } catch (error: any) {
        console.error('Error creating part:', error);
        this.error = error.message || 'An error occurred while creating the part';
        throw error;
      } finally {
        this.loading = false;
      }
    },
    async updatePart(partId: number, partData: Partial<Part>) {
      this.loading = true;
      this.error = null;
      try {
        const response = await api.put(`/parts/${partId}`, partData);
        const updatedPart = new Part(response.data.data);
        const index = this.parts.findIndex(p => p.$attributes.id === partId);
        if (index !== -1) {
          this.parts[index] = updatedPart;
        }
        return updatedPart;
      } catch (error: any) {
        console.error('Error updating part:', error);
        this.error = error.message || 'An error occurred while updating the part';
        throw error;
      } finally {
        this.loading = false;
      }
    },
    async deletePart(partId: number) {
      this.loading = true;
      this.error = null;
      try {
        await api.delete(`/parts/${partId}`);
        this.parts = this.parts.filter(p => p.$attributes.id !== partId);
      } catch (error: any) {
        console.error('Error deleting part:', error);
        this.error = error.message || 'An error occurred while deleting the part';
        throw error;
      } finally {
        this.loading = false;
      }
    },
  },
});


==== resources\js\Stores\purchaseOrderStore.d.ts ====

import { Ref } from 'vue';
import { Supplier } from '../Models/Supplier';

export interface PurchaseOrderStore {
  supplier: Ref<Supplier | null>;
  error: Ref<string | null>;
  setSupplier: (supplier: Supplier) => Promise<void>;
  createPurchaseOrder: () => Promise<any>;
}

export function usePurchaseOrderStore(): PurchaseOrderStore;


==== resources\js\Stores\purchaseOrderStore.ts ====

import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import { Supplier } from '../Models/Supplier';
import { Part } from '../Models/Part';
import api from '../api';

export const usePurchaseOrderStore = defineStore('purchaseOrder', () => {
  const suppliers = ref<Supplier[]>([]);
  const selectedSupplier = ref<Supplier | null>(null);
  const parts = ref<Part[]>([]);
  const loading = ref(false);
  const error = ref<string | null>(null);

  const supplierCount = computed(() => suppliers.value.length);
  const partsCount = computed(() => parts.value.length);

  async function fetchSuppliers(params = {}) {
    loading.value = true;
    error.value = null;
    try {
      const response = await api.get('/api/suppliers', {
        params: {
          ...params,
          include: 'parts',
          sort: '-created_at',
        },
      });
      suppliers.value = response.data.data.map((item: any) => new Supplier(item));
    } catch (err: any) {
      console.error('Failed to fetch suppliers:', err);
      error.value = err.message || 'Failed to fetch suppliers';
    } finally {
      loading.value = false;
    }
  }

  async function selectSupplier(supplierId: number) {
    const supplier = suppliers.value.find(s => s.id === supplierId);
    if (supplier) {
      selectedSupplier.value = supplier;
      if (supplier.parts) {
        parts.value = supplier.parts.map((item: any) => new Part(item));
      } else {
        await fetchSupplierParts(supplierId);
      }
    } else {
      error.value = 'Selected supplier not found';
    }
  }

  async function fetchSupplierParts(supplierId: number) {
    loading.value = true;
    error.value = null;
    try {
      const response = await api.get(`/api/suppliers/${supplierId}`, {
        params: {
          include: 'parts.bill_of_material',
        },
      });
      parts.value = response.data.data.parts.map((item: any) => new Part(item));
    } catch (err: any) {
      console.error('Failed to fetch supplier parts:', err);
      error.value = err.message || 'Failed to fetch supplier parts';
    } finally {
      loading.value = false;
    }
  }

  function updatePartQuantity(partId: number, quantity: number) {
    const part = parts.value.find(p => p.id === partId);
    if (part) {
      part.updateQuantity(quantity);
    }
  }

  function resetSelection() {
    selectedSupplier.value = null;
    parts.value = [];
  }

  async function createPurchaseOrder() {
    // Implement the logic to create a purchase order
    // This is a placeholder and should be implemented based on your backend API
    console.log('Creating purchase order...');
  }

  return {
    suppliers,
    selectedSupplier,
    parts,
    loading,
    error,
    supplierCount,
    partsCount,
    fetchSuppliers,
    selectSupplier,
    updatePartQuantity,
    resetSelection,
    createPurchaseOrder,
  };
});


==== resources\js\Stores\supplierStore.ts ====

import { defineStore } from 'pinia';
import { ref } from 'vue';
import { Supplier } from '../Models/Supplier';
import api from '../api';

export const useSupplierStore = defineStore('supplier', () => {
  const suppliers = ref<Supplier[]>([]);
  const loading = ref(false);
  const error = ref<string | null>(null);

  async function fetchSuppliers() {
    loading.value = true;
    error.value = null;
    try {
      const response = await api.get('/suppliers');
      suppliers.value = response.data.data.map((item: any) => new Supplier(item));
      console.log('Fetched suppliers:', suppliers.value);
    } catch (err: any) {
      console.error('Failed to fetch suppliers:', err);
      error.value = err.message || 'Failed to fetch suppliers';
    } finally {
      loading.value = false;
    }
  }

  return {
    suppliers,
    loading,
    error,
    fetchSuppliers,
  };
});


==== resources\js\theme-preset.js ====

import Aura from '@primevue/themes/aura';
import { definePreset } from '@primevue/themes';

const customThemePreset = definePreset(Aura, {
    semantic: {
        primary: {
            50: '{indigo.50}',
            100: '{indigo.100}',
            200: '{indigo.200}',
            300: '{indigo.300}',
            400: '{indigo.400}',
            500: '{indigo.500}',
            600: '{indigo.600}',
            700: '{indigo.700}',
            800: '{indigo.800}',
            900: '{indigo.900}',
            950: '{indigo.950}',
        },
        colorScheme: {
            light: {
                surface: {
                    50: '{gray.50}',
                    100: '{gray.100}',
                    200: '{gray.200}',
                    300: '{gray.300}',
                    400: '{gray.400}',
                    500: '{gray.500}',
                    600: '{gray.600}',
                    700: '{gray.700}',
                    800: '{gray.800}',
                    900: '{gray.900}',
                    950: '{gray.950}',
                },
            },
            dark: {
                surface: {
                    50: '{gray.50}',
                    100: '{gray.100}',
                    200: '{gray.200}',
                    300: '{gray.300}',
                    400: '{gray.400}',
                    500: '{gray.500}',
                    600: '{gray.600}',
                    700: '{gray.700}',
                    800: '{gray.800}',
                    900: '{gray.900}',
                    950: '{gray.950}',
                },
            },
        },
    },
});

export default {
    preset: customThemePreset,
    options: {
        darkModeSelector: '.dark-mode',
        cssLayer: {
            name: 'primevue',
            order: 'tailwind-base, primevue, tailwind-utilities',
        },
    },
};


==== resources\js\types\vue-shims.d.ts ====

declare module '*.vue' {
  import { DefineComponent } from 'vue'
  const component: DefineComponent<{}, {}, any>
  export default component
}


==== resources\js\ziggy.js ====

const Ziggy = {"url":"http:\/\/localhost","port":null,"defaults":{},"routes":{"sanctum.csrf-cookie":{"uri":"sanctum\/csrf-cookie","methods":["GET","HEAD"]},"welcome":{"uri":"\/","methods":["GET","HEAD"]},"dashboard":{"uri":"dashboard","methods":["GET","HEAD"]},"profile.edit":{"uri":"profile","methods":["GET","HEAD"]},"profile.update":{"uri":"profile","methods":["PATCH"]},"profile.destroy":{"uri":"profile","methods":["DELETE"]},"purchase-orders.create":{"uri":"purchase-orders\/create","methods":["GET","HEAD"]},"register":{"uri":"register","methods":["GET","HEAD"]},"login":{"uri":"login","methods":["GET","HEAD"]},"password.request":{"uri":"forgot-password","methods":["GET","HEAD"]},"password.email":{"uri":"forgot-password","methods":["POST"]},"password.reset":{"uri":"reset-password\/{token}","methods":["GET","HEAD"],"parameters":["token"]},"password.store":{"uri":"reset-password","methods":["POST"]},"verification.notice":{"uri":"verify-email","methods":["GET","HEAD"]},"verification.verify":{"uri":"verify-email\/{id}\/{hash}","methods":["GET","HEAD"],"parameters":["id","hash"]},"verification.send":{"uri":"email\/verification-notification","methods":["POST"]},"password.update":{"uri":"password","methods":["PUT"]},"logout":{"uri":"logout","methods":["POST"]}}};
if (typeof window !== 'undefined' && typeof window.Ziggy !== 'undefined') {
  Object.assign(Ziggy.routes, window.Ziggy.routes);
}
export { Ziggy };
